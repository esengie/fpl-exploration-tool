DependentSorts :
  tm, ty

FunctionalSymbols :
  bool : ty
  false : tm
  true : tm
  if : (ty, 1) * (tm, 0) * (tm, 0) * (tm, 0) -> tm
  lam : (ty , 0) * (tm , 1) -> tm
  app : (tm , 0) * (tm , 0) -> tm
  pi : (ty, 0) * (ty, 1) -> ty
  sigma : (ty , 0) * (ty , 2) -> tm

Axioms :
  Tr =
    forall
      |--- |- true : bool

  Fls =
    forall
      |--- |- false : bool

  Bool =
    forall
      |--- |- bool def

  If-then =
    forall t : tm, t1 : tm, t2 : tm, x.A : ty
      x : bool |- A def, |- t1 : A[x:=true], |- t2 : A[x:=false], |- t : bool |--- |- if(x.A, t, t1, t2) : A[x:=t]

  K-Pi =
    forall T1 : ty , x.T2 : ty
      x : T1 |- T2 def |--- |- pi(T1, x.T2) def

  TAbs =
    forall S : ty , x.T : ty , x.t : tm
      x : S |- t : T |--- |- lam(S , x.t) : pi(S , x.T)

  -- [Stable - Bool]
  TApp =
    forall t1 : tm , t2 : tm , S : ty, x.T : ty
      |- t1 : pi(S, x.T) , |- t2 : S |---- |- app(t1 , t2, x.T) : T[x:=t2]

  TSig =
    forall t1 : tm , t2 : tm , S : ty, (x y).T : ty
      |- t1 : pi(S, x.T[y:=true]) , |- t2 : S |---- |- sigma(S , (y x).T) : T[x:=t2][y:= t2]

--   TApp =
--     forall t1 : tm , t2 : tm , S : ty, x.T : ty, y.R : ty, y.P : tm
--       |- lam(S, y.lam(S, x.P)) : pi(S, x.pi(T, y.R) , |- t2 : S |---- |- app(S, t1 , t2, R, P) : T[x:=t2]
-- А в такой хитрой аксиоме строю терм y.lam(S, x.y), а затем разбираю pi чтобы достать T.
-- Ну а так как я не знаю что из себя представляет x, то контекст я расширить не могу



Reductions :
  Beta = -- not impl
    forall x.b : tm, A : ty, a : tm, x.T : ty
      x : A |- b : T, |- a : A |--- |- app(lam(A , x.b) , a) => b [x := a] : T[x:=app(a, a)]

  IfRed =
    forall x.A : ty, f : tm , g : tm
      |--- |- if(x.A, true, f, g) => f : A[x:=true]

--

-- Есть связь между forall x.t, x.T?
-- t1 : lam(S, x.app(t, T)) как вытащить T?
