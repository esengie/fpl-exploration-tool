DependentSorts :
  tm, ty

SimpleSorts :


FunctionalSymbols :
  pi : (ty , 0) * (ty , 1) -> ty -- sigma : (ty , 0) * (ty , 1) -> ty
  lam : (ty , 0) * (tm , 1) -> tm
  app : (tm , 0) * (tm , 0) -> tm

Axioms :
-- (tm , 0) -- означает \x -> x; (tm , 1) \x -> y, var always term
-- x.B -- func from tm to ty
-- (ty , 2) : tm -> tm -> ty
-- context - only vars
  -- !! how to do basic types? - we have tm, but how to have a substructure on that? like, say, bool?

  KPi =
    forall T1 : ty , x.T2 : ty
      x : T1 |- T2 def |--- |- pi(T1, x.T2) def

  TAbs =  -- !! what happens if I have a "-" in my axioms?
   ------  b : (tm , 1) -- мало, надо знать имена переменных в контексте!
    forall S : ty , x.T : ty , x.t : tm  -- х есть переменная (у метаперем есть сорт)
      x : S |- t : T |--- |- lam(S , x.t) : pi(S , x.T)
                -- Gamma is everywhere, so we check if we have x in context not context equality
  TApp =
    forall t1 : tm , t2 : tm , S : ty, x.T : ty  -- не ругаться если больше параметров чем использованных
      |- t1 : pi(S, x.T) , |- t2 : S |---- |- app(t1 , t2) : T[x:=t2] -- !! tut x.T or T??

-- ReductionRules:
--  Beta =
--    forall x.b : tm , A : ty, a : tm
--      app(lam(A, x.b), a) => b [x := a]

  -- no subst on the left here
  -- unit type is hard - why?

  -- no equality in the result, but can be in the premise!


-- can context become larger? (yes), and context of the variable?
-- equality, subst and isTypeOf (lam(A , x.b) : arr(A , B))
-- right of forall can it have terms or not? (x.b : arr(A , B) -- no because ':' is meta op


-- end goal -- ast + parser + typechecker of lang
-- then add implicit params

__
1) А в любом языке который я специфицирую как пользователь есть ещё конструкция (пускай Var ...) Var "string" - которая задает переменную?
Ну и видимо есть базовый тип, пускай "o"?

Пример, пускай есть такая аксиома/правило вывода (доп вопрос, она правильно записана? А именно t и T записаны без связывания, но x есть в их контексте):
TAbs =
 forall S : ty , x.T : ty , x.t : tm
   |- S = S , x : S |- t : T |--- |- lam(S , x.t) : pi(S , x.T)

Хочу записать id : pi("o", x."o"). Хорошо, первая предпосылка (|- "o" = "o") это аксиома языка.
Вторую (x : "o" |- x : "o") я не очень понимаю как записать.
Видимо нужна аксиома, пускай такая: AxVar (Var "x") (Type "o") - это и есть то что требуется? (аксиома выглядит так |- x : "o" (*))
Ну и пишу TAbs(Type "o", Type "o", Var "x", AxBaseType "o", AxVar (Var "x") (Type "o")) - это мой id видимо?

2) Как мне как пользователю расширять базовые типы? (хочу например Bool)

Пока что у нас есть аксиомы в которые начинаются с forall A : ty - то бишь работают для всех типов,
а мне нужна возможность вводить аксиомы работающие для конкретных типов.

Видимо ответ на вопрос о расширении "пока никак, тк язык не дает"?
Или доп пунктик добавить с базовыми типами и все будет нормально?

(*) Увеличение контекста в наших случаях ничего не ломает насколько я понимаю?
