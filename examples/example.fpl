-- <- comment, indent is meaningful

DependentSorts : -- meaning context dependent
  tm, tn -- all depsorts depend on tm, (tm must always exist) tm always dependent

SimpleSorts :
  ty   -- ty should always exist, mb dep mb indep

FunctionalSymbols :
  arr : ty * ty -> ty
  cart : (tn , 0) * (tn , 0) -> tn
  pi : (tn , 0) * (tn , 1) -> tn  -- B : A -> U, we have B(x) - so we need x in our context
  sigma : (tn , 0) * (tn , 1) -> tn
  lam : ty * (tm , 1) -> tm
  app : (tm , 0) * (tm , 0) -> tm

Axioms :
-- (tm , 0) -- means \x -> x; (tm , 1) \x -> y, var always term

  AxiomOne =
   ------  b : (tm , 1) -- to little info, need to know variable names in context of b
    forall A : ty , B : ty , x.b : tm
      x : A |- b : B |--- |- lam(A , (x y). b) : arr(A , B)
            -- incorrect, not typecheck, needs (tm , 1)

  AxiomTwo =
    forall (x y).b : tm , B : ty , A : ty
      x : A |- b : B , |- a : A |---- |- app( lam(A , x.b) , a) : B

  AxiomThree =
    forall (x y).b : tm , z.B : tn , A : ty  -- meta ":" - for sorts
      x : A |- b : B , |- a : A |--- |- app( lam(A , (y x).b[x:=a]) , a) : B [ z := a ]

  DepApp =
    forall x.B : ty, A : ty, e1 : tm , e2 : tm
      |- e1 : pi(A , x.B) , |- e2 : A  |--- |- app(e1 , e2) : B[ x := e2 ]


ReductionRules:
  Beta =
    forall x.b : tm , A : ty, a : tm
      |--- |- app(lam(A, x.b), a) => b [x := a]





--------------------------
